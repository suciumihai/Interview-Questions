facem src / main / rsources, pentru applciation.properties
daca iti faci mavenu tau, vezi in conf file unde face repo, plugins, si daca ai vreun mirror sau default
-----
tre configurat spring boot
(cu ersistence xml)

tre configurata dependinta de hsqldb - in mem db;

daca vrei sa vezi clientu, in un test biag
new thread(new runnable (DatabaseManagerSwing.main(new String[]{"--url", "jdbc:hsqldb:mem:" + EmbeddedDatabaseFactory.DEFAULT_DATABASE_NAME, "--user", "sa", "--password", ""});)).start();
apoi pi un break undeva in test, ca sa poti sa lucrezi din cleintul asta;


un test tre sa arate

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
        "classpath:batch/interview.config.xml",
        "classpath:batch/jobs.xml"})
@TestExecutionListeners(listeners = {DependencyInjectionTestExecutionListener.class,
        DirtiesContextTestExecutionListener.class, DbUnitTestExecutionListener.class},
        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)
@ActiveProfiles("test")
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)

- el deja are scri[pturi, unde e definita bd;

first un test simplu, fara bd,
apoi untest pe bd


ca sa te joci cu post

{
	"id": 10,
	"name": "maria",
	"surName": "ion",
	"email": "maria.ion@yahoo.com",
	"phone": "0744444444"
}

-----

angular
https://www.devglan.com/spring-boot/spring-boot-angular-example

ai facut install node js; adaugat npm la path
npm install -g @angular/cli
ng new portal-app

aranjat poutin application.properties cu server.contextPath=/user-portal

ai modificat app.component.html cu 2 different views user.component.html, add-user.component.html and components(user.component.ts, add-user.component.ts)

apoi in folderul model, umbli la user.model.ts, user.service.ts (ca in java, pojo si serviciu cu functiile)

configure anguarlr routing in app.routing.module.ts (aici adaug pathyurile, gen / add = addCandiComp)

include above imple in module app.module.ts (aici aduag in text ce ocmponente am definit)

configure cli proxy.config.json

npm start (poate ng serve peste java rest pornit)

(sau ake sure to change the userUrl value to '/api' in user.service.ts file and comment @CrossOrigin in UserController.java.Once this done use ng serve --proxy-config proxy.config.json or npm start to start the angular app.)



Modules - Modules break up the application into logical pieces of code. Each piece of code or module is designed to perform a single task.All the modules are loaded by main.ts.

Component - Component is used to bring the modules together.

tsconfig.json - The presence of tsconfig.json file in a directory indicates that the directory is the root of a typescript project.This file specifies the root files and typescript compiler motions required to compile typescript.

package.json - It contains all the dependencies defined for the angular project.Once, we do nom install, these dependencies are automatically downloaded.

karma.conf.json - Config file for karma unit tests.

The file .angular-cli.json will have all the application configurations such as info about the root and out directory.The welcome or main html file along with the main ts file. All the other environment related information will be present here.